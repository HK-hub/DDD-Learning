/**
 * @ClassName : module-info
 * @author : HK意境
 * @date : 2023/10/8 14:31
 * @description :领域层是领域模型的核心，主要实现领域模型的核心业务逻辑，体现领域模型的业务能力。领域层关注实现领域对象的充血模型和聚合本身的原子业务逻辑，至于用户操作和业务流程，则交给应用层去编排。这样设计可以保证领域模型不容易受外部需求变化的影响，保证领域模型的稳定。
 * 领域层的核心类：
 *
 * 实体类(Entity)：大多数DDD架构的核心都是实体类，实体类包含了一个领域里的状态、以及对状态的直接操作。Entity最重要的设计原则是保证实体的不变性（Invariants），也就是说要确保无论外部怎么操作，一个实体内部的属性都不能出现相互冲突，状态不一致的情况。
 * 值对象(VO)：通常是用来度量和描述事物。我们可以非常容易的对其进行创建，测试，使用，优化和维护，所以在建模时，我们尽量采用值对象来建模。
 * 聚合根(Aggr)：聚合是由业务和逻辑紧密关联的实体和值对象组合而成的。聚合是数据修改和持久化的基本单元。每个聚合都有一个根实体，叫做聚合根，外界只能通过聚合根跟聚合通信。聚合根的主要目的是为了避免由于复杂数据模型缺少统一的业务规则控制，而导致聚合、实体之间数据不一致的问题。
 * 领域服务(DomainService)：当某个操作不适合放在聚合和值对象上时，最好的方式便是使用领域服务了。可以使用领域服务的地方，过度使用领域服务将导致贫血领域模型。执行一个显著的业务操作过程；对领域对象进行转换；已多个领域对象作为输入进行计算，结果产生一个值对象。
 * 仓储层接口(Repository)：把我们要的数据当做一个集合放在仓储里面，想要的时候直接获取。仓储作为领域层和基础结构层的连接组件，使得领域层不必过多的关注存储细节。在设计时，将仓储接口放在领域层，而将仓储的具体实现放在基础结构层，领域层通过接口访问数据存储，而不必过多的关注仓储存储数据的细节，这样使得领域层将更多的关注点放在领域逻辑上面。
 * 工厂(Factory)：对于实体等对象构造比较麻烦的，可以借助工厂进行构造。
 *
 * 通常，对于实体、值对象、聚合根，我们不可以不加类后缀，这样更能体现领域对象本身的含义。
 *
 *
 * 依赖反转原则：Domain层依赖的外部接口都要定义在Domain模块的port包中。Domain层只面向接口编程，不依赖接口实现类。


 * @Todo :
 * @Bug :
 * @Modified :
 * @Version : 1.0
 */
module ddd.domain {
}